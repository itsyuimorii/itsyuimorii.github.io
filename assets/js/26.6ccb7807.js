(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{296:function(e,t,a){e.exports=a.p+"assets/img/gitrebase.175e6a7f.png"},336:function(e,t,a){"use strict";a.r(t);var s=a(14),n=Object(s.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"‚ö™Ô∏è-git-and-github-„Å∏„ÅÆÊ∑±„ÅÑÁêÜËß£"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#‚ö™Ô∏è-git-and-github-„Å∏„ÅÆÊ∑±„ÅÑÁêÜËß£"}},[e._v("#")]),e._v(" ‚ö™Ô∏è git and github „Å∏„ÅÆÊ∑±„ÅÑÁêÜËß£")]),e._v(" "),t("p",[e._v("üî∫ "),t("a",{attrs:{href:"https://chodocs.cn/memo/git-command/",target:"_blank",rel:"noopener noreferrer"}},[e._v("Â∏∏Áî®‰∏Ä‰∫õ Git ÂëΩ‰ª§"),t("OutboundLink")],1)]),e._v(" "),t("h2",{attrs:{id:"git-branch"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-branch"}},[e._v("#")]),e._v(" git branch")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout staging/name\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" pull origin staging/name  "),t("span",{pre:!0,attrs:{class:"token comment"}},[e._v("# Ensure you have the latest changes")]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" checkout "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-b")]),e._v(" branch-name staging/name\n")])])]),t("h2",{attrs:{id:"git-rebase-fix-old-commit"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-rebase-fix-old-commit"}},[e._v("#")]),e._v(" "),t("code",[e._v("git rebase")]),e._v(" fix old commit")]),e._v(" "),t("p",[t("img",{attrs:{src:a(296),alt:"gitrebase"}})]),e._v(" "),t("ol",[t("li",[t("p",[t("code",[e._v("git rebase -i HEAD~ 2")])])]),e._v(" "),t("li",[t("p",[e._v("change the pick to edit "),t("code",[e._v("r")])])]),e._v(" "),t("li",[t("p",[t("code",[e._v("git commit --amend")])])]),e._v(" "),t("li",[t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("wq: "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("write")]),e._v(" and quit\nq"),t("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v(": quit without saving\ni: insert mode\n")])])])])]),e._v(" "),t("h2",{attrs:{id:"fix-the-most-recent-commit-message"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#fix-the-most-recent-commit-message"}},[e._v("#")]),e._v(" Fix the most recent commit message")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("--amend")]),e._v("\n")])])]),t("p",[e._v("üî∫ ### Reference:")]),e._v(" "),t("ul",[t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6986951160619859975?from=search-suggest",target:"_blank",rel:"noopener noreferrer"}},[e._v("git „ÅØ pull „ÅÆ„Éá„Éï„Ç©„É´„ÉàË®≠ÂÆö„Çí„É™„Éô„Éº„Çπ„Åô„Çã„Çà„ÅÜ„Å´Â§âÊõ¥„Åô„Çã„ÄÇ"),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.cn/post/6844903618177433613?from=search-suggest",target:"_blank",rel:"noopener noreferrer"}},[e._v(" git pull vs git pull --rebase "),t("OutboundLink")],1)]),e._v(" "),t("li",[t("a",{attrs:{href:"https://juejin.cn/post/7062315341124698119",target:"_blank",rel:"noopener noreferrer"}},[e._v("„Çà„ÇäÊ∑±„ÅÑÁêÜËß£ git pull"),t("OutboundLink")],1)])]),e._v(" "),t("h2",{attrs:{id:"git-commit-message"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#git-commit-message"}},[e._v("#")]),e._v(" git commit message")]),e._v(" "),t("h3",{attrs:{id:"scenario"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#scenario"}},[e._v("#")]),e._v(" Scenario")]),e._v(" "),t("p",[e._v("Imagine you're developing a new feature that allows users to send feedback via email. During development, you made the following three commits:")]),e._v(" "),t("ol",[t("li",[e._v("Added a form to collect user feedback")]),e._v(" "),t("li",[e._v("Implemented logic to process the form data")]),e._v(" "),t("li",[e._v("Added functionality to send feedback via email")])]),e._v(" "),t("h3",{attrs:{id:"development-and-commits"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#development-and-commits"}},[e._v("#")]),e._v(" Development and Commits")]),e._v(" "),t("p",[e._v("In Git, you might commit these changes like so:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add feedback form"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Implement feedback processing logic"')]),e._v("\n"),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" commit "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-m")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token string"}},[e._v('"Add email sending functionality"')]),e._v("\n")])])]),t("h3",{attrs:{id:"squashing-commits"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#squashing-commits"}},[e._v("#")]),e._v(" Squashing Commits")]),e._v(" "),t("p",[e._v("Before merging this feature into the "),t("code",[e._v("main")]),e._v(" branch, you decide to squash these three commits into one. This can be done in a pull request or by using interactive rebase in your local branch:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("git")]),e._v(" rebase "),t("span",{pre:!0,attrs:{class:"token parameter variable"}},[e._v("-i")]),e._v(" HEAD~3\n")])])]),t("p",[e._v("This opens an editor listing the last 3 commits. You can change the "),t("code",[e._v("pick")]),e._v(" command to "),t("code",[e._v("squash")]),e._v(" (or just "),t("code",[e._v("s")]),e._v(" for short) for the second and third commits, instructing Git to squash them into the first one.")]),e._v(" "),t("h3",{attrs:{id:"commit-message-following-conventional-commits"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#commit-message-following-conventional-commits"}},[e._v("#")]),e._v(" Commit Message Following Conventional Commits")]),e._v(" "),t("p",[e._v("After squashing, you're prompted to provide a new commit message that should follow the Conventional Commits specification. For our example, the commit message could be:")]),e._v(" "),t("div",{staticClass:"language-plaintext extra-class"},[t("pre",{pre:!0,attrs:{class:"language-plaintext"}},[t("code",[e._v("feat(email): add user feedback email functionality\n\n- Add feedback form\n- Implement feedback processing logic\n- Add functionality to send feedback via email\n")])])]),t("p",[e._v("This message clearly describes the nature of the commit ("),t("code",[e._v("feat")]),e._v("), the module affected ("),t("code",[e._v("email")]),e._v("), and the specific changes made. This format helps automated tools (like those generating CHANGELOGs) to understand the intent and scope of each commit.")]),e._v(" "),t("h3",{attrs:{id:"automating-changelog-with-conventional-commits"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#automating-changelog-with-conventional-commits"}},[e._v("#")]),e._v(" Automating CHANGELOG with Conventional Commits")]),e._v(" "),t("p",[e._v("Once you start following the Conventional Commits specification, you can use tools like "),t("code",[e._v("standard-version")]),e._v(" to automate CHANGELOG generation. "),t("code",[e._v("standard-version")]),e._v(" automatically bumps the version number based on your commit history and generates or updates the CHANGELOG file.")]),e._v(" "),t("p",[e._v("To install "),t("code",[e._v("standard-version")]),e._v(":")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[t("span",{pre:!0,attrs:{class:"token function"}},[e._v("npm")]),e._v(" "),t("span",{pre:!0,attrs:{class:"token function"}},[e._v("install")]),e._v(" --save-dev standard-version\n")])])]),t("p",[e._v("Then, you can create a new release and CHANGELOG by running:")]),e._v(" "),t("div",{staticClass:"language-bash extra-class"},[t("pre",{pre:!0,attrs:{class:"language-bash"}},[t("code",[e._v("npx standard-version\n")])])]),t("p",[e._v("This command automatically determines the type of version bump (major, minor, or patch) based on your commit history (identifying "),t("code",[e._v("feat")]),e._v(", "),t("code",[e._v("fix")]),e._v(", etc.), updates the version number in "),t("code",[e._v("package.json")]),e._v(", and generates or updates the CHANGELOG based on your commits.")]),e._v(" "),t("h3",{attrs:{id:"summary"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#summary"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),t("p",[e._v("Through this practical example, we explored how to keep commit history clean by using squash commits during development and how to enhance the readability and automation of commit messages by adhering to the Conventional Commits standard. These practices are highly beneficial for team collaboration, project maintenance, and automated version control.")])])}),[],!1,null,null,null);t.default=n.exports}}]);